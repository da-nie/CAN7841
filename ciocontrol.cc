//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include "ciocontrol.h"

#include <hw/inout.h>
#include <sys/mman.h>

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//конструктор и деструктор класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//----------------------------------------------------------------------------------------------------
//конструктор
//----------------------------------------------------------------------------------------------------
CIOControl::CIOControl(void)
{
 PhisicalPort=0;
 Size=0;
 VirtualPort=MAP_DEVICE_FAILED;
}

CIOControl::CIOControl(uint64_t phisical_port,uint64_t size)
{
 PhisicalPort=0;
 Size=0;
 VirtualPort=MAP_DEVICE_FAILED;
 SetPort(phisical_port,size);   	
}

CIOControl::CIOControl(const CIOControl &cIOControl)
{
 if ((&cIOControl)==this) return;
 PhisicalPort=0;
 Size=0;
 VirtualPort=MAP_DEVICE_FAILED;
 SetPort(cIOControl.PhisicalPort,cIOControl.Size);
}   
//----------------------------------------------------------------------------------------------------
//деструктор
//----------------------------------------------------------------------------------------------------
CIOControl::~CIOControl()
{
 Release();	
}

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//закрытые функции класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//открытые функции класса
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//----------------------------------------------------------------------------------------------------
//оператор =
//----------------------------------------------------------------------------------------------------
CIOControl& CIOControl::operator=(const CIOControl &cIOControl)
{
 if (this!=(&cIOControl)) SetPort(cIOControl.PhisicalPort,cIOControl.Size);   	
 return(*this);
}  
//----------------------------------------------------------------------------------------------------
//освободить ресурсы
//----------------------------------------------------------------------------------------------------
void CIOControl::Release(void)
{
 if (VirtualPort!=MAP_DEVICE_FAILED) munmap_device_io(VirtualPort,Size);  
 VirtualPort=MAP_DEVICE_FAILED;    
}
//----------------------------------------------------------------------------------------------------
//задать порты
//----------------------------------------------------------------------------------------------------
bool CIOControl::SetPort(uint64_t phisical_port,uint64_t size)
{
 Release();   	
 PhisicalPort=phisical_port;
 Size=size;
 VirtualPort=mmap_device_io(Size,PhisicalPort);
 if (VirtualPort==MAP_DEVICE_FAILED) return(false);
 return(true);
}
//----------------------------------------------------------------------------------------------------
//получить, есть ли данный порт
//----------------------------------------------------------------------------------------------------
bool CIOControl::IsPort(uint64_t offset)
{
 if (VirtualPort==MAP_DEVICE_FAILED) return(false);
 if (offset>=Size) return(false);
 return(true);	
}

//----------------------------------------------------------------------------------------------------
//получить порт
//----------------------------------------------------------------------------------------------------
uintptr_t CIOControl::GetPort(void)
{
 return(VirtualPort);
}
//----------------------------------------------------------------------------------------------------
//получить размер области портов
//----------------------------------------------------------------------------------------------------
uint64_t CIOControl::GetSize(void)
{
 return(Size); 	
}   
//----------------------------------------------------------------------------------------------------
//записать байт в порт
//----------------------------------------------------------------------------------------------------
bool CIOControl::Out8(uint64_t offset,uint8_t value)
{
 if (IsPort(offset)==false) return(false);
 asm volatile ("": : :"memory");
 out8(VirtualPort+offset,value);
 return(true);
}
//----------------------------------------------------------------------------------------------------
//считать байт из порта   
//----------------------------------------------------------------------------------------------------
uint8_t CIOControl::In8(uint64_t offset)
{
 if (IsPort(offset)==false) return(0);	
 asm volatile ("": : :"memory");
 return(in8(VirtualPort+offset));
}   
