#ifndef C_RING_BUFFER_H
#define C_RING_BUFFER_H

//****************************************************************************************************
//Класс кольцевого буфера
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <stdint.h>
#include "cuniqueptr.h"

//****************************************************************************************************
//Класс кольцевого буфера
//****************************************************************************************************

template<class Element>
class CRingBuffer
{
 //-переменные-----------------------------------------------------------------------------------------
 private:
  CUniquePtr<Element> Buffer;//буфер данных
  size_t Head;//голова в буфере
  size_t Tail;//хвост в буфере
  size_t Size;//размер буфера
 //-конструктор----------------------------------------------------------------------------------------
 public:
  CRingBuffer(size_t size=1)
  {
   Buffer.Set(new Element[size+1]);
   Reset();
   Size=size;  	
  }
 //-деструктор-----------------------------------------------------------------------------------------
  ~CRingBuffer()
  {
  }
 //-открытые функции-----------------------------------------------------------------------------------
 public:
  //добавить элемент в кольцевой буфер 
  void Push(const Element &element)
  {
   Buffer.Get()[Head]=element;
   Head++;
   if (Head==Size) Head=0;
   if (Head==Tail) Tail++;
   if (Tail==Size) Tail=0;	
  }
  //забрать элемент из кольцевого буфера
  bool Pop(Element &element)
  {
   if (Head==Tail) return(false);
  element=Buffer.Get()[Tail];
   Tail++;
   if (Tail==Size) Tail=0;
   return(true);	
  }
  //получить сколько байт в кольцевом буфере
  size_t GetDataSize(void) const
  {
   if (Head<Tail) return(Size-Tail+Head);
   return(Head-Tail);  	
  }
  //получить позицию головы буфера
  size_t GetHeadPos(void) const
  { 
   return(Head);
  }
  //получить позицию хвоста буфера
  size_t GetTailPos(void) const
  {
   return(Tail);
  }
  //получить общий размер буфера
  size_t GetBufferSize(void) const
  {
   return(Size);	
  }
  //удалить данные из буфера
  void Reset(void)
  {
   Head=0;
   Tail=0;  	
  }
  //задать позицию хвоста буфера
  void SetTailPos(size_t pos)
  {
   if (pos>=Size) return;
   Tail=pos;  	
  }
  //задать позицию головы буфера
  void SetHeadPos(size_t pos)
  {
   if (pos>=Size) return;
   Head=pos;   	
  }
 //-закрытые функции-----------------------------------------------------------------------------------
 private:
};

#endif
